name: Flask App CI/CD with Code Verification

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: flask-app
  DOCKER_HUB_REPO: thong0710/flask-app
  EC2_IP: 13.229.126.89 

jobs:
  code-verification:
    name: Code Quality & Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black bandit safety mypy
        pip install -r requirements.txt || echo "No requirements.txt found"
        
    - name: Python syntax check
      run: |
        echo "Checking Python syntax..."
        python -m py_compile app.py
        find . -name "*.py" -exec python -m py_compile {} \;
        echo "Syntax check passed"
        
    - name: Code style check (PEP8)
      run: |
        echo "Checking code style with flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,env
        flake8 . --count --max-complexity=10 --max-line-length=120 --statistics --exclude=venv,env || true
        echo "Code style check completed"
        
    - name: Code formatting check
      run: |
        echo "Checking code formatting with black..."
        black --check --diff . || echo "  Code formatting could be improved"
        
    - name: Security vulnerability scan
      run: |
        echo " Scanning for security vulnerabilities..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium || echo "  Security warnings found"
        
    - name: Dependency security check
      run: |
        echo " Checking dependencies for known vulnerabilities..."
        safety check || echo "  Dependency security warnings found"
        
    - name: Type checking (if type hints exist)
      run: |
        echo "  Running type checks..."
        mypy app.py --ignore-missing-imports || echo "â„¹  Type checking completed with warnings"
        
    - name: Import and basic functionality test
      run: |
        echo " Testing basic application functionality..."
        python3 -c "
        try:
            import app
            print(' App import successful')
            if hasattr(app, 'app'):
                print(' Flask app object found')
            else:
                print('  Flask app object not found')
        except Exception as e:
            print(f' App import failed: {e}')
            exit(1)
        "

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-verification
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        if [ -f "test_app.py" ] || [ -d "tests/" ]; then
          echo " Running unit tests..."
          pytest --verbose --cov=. --cov-report=term --cov-report=xml
          echo " Tests completed"
        else
          echo "  No test files found. Creating basic test..."
          echo "
        import requests
        import subprocess
        import time

        def test_app_starts():
            '''Test that the app can start without errors'''
            try:
                # Test import
                import app
                assert True
            except Exception as e:
                assert False, f'App failed to import: {e}'

        def test_basic_functionality():
            '''Basic functionality test'''
            import app
            # Add more specific tests here
            assert hasattr(app, 'app'), 'Flask app object should exist'
                  " > basic_test.py
                  pytest basic_test.py --verbose
                fi

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [code-verification, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage
        run: |
          if [ -f "test_app.py" ] || [ -d "tests/" ]; then
            pytest --cov=. --cov-report=xml
          else
            echo "# No tests found, creating coverage placeholder" > coverage.xml
          fi
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push:
    name: Build & Push Docker Image
    needs: [code-verification, test, sonarcloud]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        
    - name: Build and push Docker image
      run: |
        echo " Building Docker image..."
        docker build -t ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }} .
        docker tag ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }} ${{ env.DOCKER_HUB_REPO }}:latest
        
        echo " Pushing to Docker Hub..."
        docker push ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }}
        docker push ${{ env.DOCKER_HUB_REPO }}:latest
        echo " Docker images pushed successfully"

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to EC2
      run: |
        echo " Deploying to EC2..."
        
        # Install SSH client
        which ssh || (apt-get update && apt-get install -y openssh-client)
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add EC2 to known_hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        
        # Deploy
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} << 'EOF'
          echo " Pulling latest image..."
          docker pull ${{ env.DOCKER_HUB_REPO }}:latest
          
          echo " Updating application..."
          docker stop flask-app 2>/dev/null || true
          docker rm flask-app 2>/dev/null || true
          docker run -d --name flask-app --restart unless-stopped -p 5000:5000 ${{ env.DOCKER_HUB_REPO }}:latest
          
          echo " Cleaning up..."
          docker image prune -f
          
          echo " Deployment completed successfully!"
        EOF
        
        echo " Application deployed at: http://${{ env.EC2_IP }}:5000"
