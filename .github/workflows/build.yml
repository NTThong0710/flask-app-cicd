name: Flask App CI/CD (Simplified)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: flask-app
  DOCKER_HUB_REPO: thong0710/flask-app
  EC2_IP: 13.229.126.89 

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Dùng v3 thay vì v4
      
    - name: Set up Python
      uses: actions/setup-python@v3  # Dùng v3 thay vì v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found"
        pip install pytest || echo "pytest install failed"
        
    - name: Simple Python check
      run: |
        python3 -c "import app; print('App import successful')" || echo "App import failed"
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Quan trọng để SonarCloud có thể xem các commit trước đó
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }} .
        docker tag ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }} ${{ env.DOCKER_HUB_REPO }}:latest
        docker push ${{ env.DOCKER_HUB_REPO }}:${{ github.run_number }}
        docker push ${{ env.DOCKER_HUB_REPO }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to EC2
      run: |
        # Install SSH client
        which ssh || (apt-get update && apt-get install -y openssh-client)
        
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add EC2 to known_hosts
        ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts
        
        # Deploy
        ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} << 'EOF'
          docker pull ${{ env.DOCKER_HUB_REPO }}:latest
          docker stop flask-app 2>/dev/null || true
          docker rm flask-app 2>/dev/null || true
          docker run -d --name flask-app --restart unless-stopped -p 5000:5000 ${{ env.DOCKER_HUB_REPO }}:latest
          docker image prune -f
        EOF