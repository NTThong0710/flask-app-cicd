name: Flask App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: flask-app
  DOCKER_HUB_REPO: thong0710/flask-app
  EC2_IP: 13.229.126.89 

jobs:
  test-and-sonar:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Cần thiết cho SonarCloud
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        # Kiểm tra syntax errors và undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Kiểm tra coding style (optional - không fail pipeline)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term --junitxml=test-results.xml
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml

  build-and-push:
    needs: test-and-sonar
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.run_number }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.EC2_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        timeout: 300s
        command_timeout: 60s
        script: |
          # Pull latest image
          docker pull ${{ env.DOCKER_HUB_REPO }}:latest
          
          # Stop and remove old container
          docker stop flask-app 2>/dev/null || true
          docker rm flask-app 2>/dev/null || true
          
          # Run new container
          docker run -d \
            --name flask-app \
            --restart unless-stopped \
            -p 5000:5000 \
            ${{ env.DOCKER_HUB_REPO }}:latest
          
          # Wait for container to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:5000/; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
          
          # Cleanup old images
          docker image prune -f
          
    - name: Deployment Status
      run: |
        echo "🚀 Application deployed successfully!"
        echo "🌐 Access your app at: http://${{ env.EC2_IP }}:5000"

  notify:
    needs: [test-and-sonar, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Pipeline completed successfully!"
          echo "📊 SonarCloud analysis: Passed"
          echo "📱 App is live at: http://${{ env.EC2_IP }}:5000"
        else
          echo "❌ Pipeline failed. Check the logs for details."
        fi